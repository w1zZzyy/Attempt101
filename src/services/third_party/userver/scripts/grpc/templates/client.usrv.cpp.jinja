{% import "utils.inc.jinja" as utils %}
{{- utils.do_not_edit() }}
// This file was generated from {{ proto.source_file }}
#include "{{ proto.source_file_without_ext }}_client.usrv.pb.hpp"

{# DO NOT ADD NEW INCLUDES HERE! Add them inside codegen_definitions.hpp instead #}
#include <userver/ugrpc/client/impl/codegen_definitions.hpp>

{{ utils.include_grpcpp(proto.source_file_without_ext) }}

{% call utils.optional_namespace(proto.namespace) %}

{% for service in proto.services %}

// Inline to deduplicate between client.usrv.cpp and service.usrv.cpp
inline constexpr std::array<std::string_view, {{service.method | length}}> k{{service.name}}MethodNames = {
{% for method in service.method %}
    "{{proto.package_prefix}}{{service.name}}/{{method.name}}",
{% endfor %}
};

// Inline to deduplicate between client.usrv.cpp and service.usrv.cpp
inline const bool k{{service.name}}TypesRegistration =
    (USERVER_NAMESPACE::ugrpc::impl::RegisterMessageTypes({
{% for method in service.method %}
        std::string("{{method.input_type}}").substr(1),
        std::string("{{method.output_type}}").substr(1),
{% endfor %}
    }),
    false);

{{service.name}}Client::{{service.name}}Client(
    USERVER_NAMESPACE::ugrpc::client::impl::ClientInternals&& internals)
    : impl_(std::move(internals), GetMetadata(),
            std::in_place_type<{{utils.namespace_with_colons(proto.namespace)}}::{{service.name}}>) {
    }
{% for method in service.method %}
{% set method_id = loop.index0 %}

{% if method.client_streaming and method.server_streaming %}
{{service.name}}Client::{{method.name}}ReaderWriter {{service.name}}Client::{{method.name}}(
    std::unique_ptr<::grpc::ClientContext> context,
    const USERVER_NAMESPACE::ugrpc::client::Qos& qos
) const {
    return {
        USERVER_NAMESPACE::ugrpc::client::impl::CreateCallParams(
            impl_, {{method_id}}, std::move(context), qos
        ),
        &{{service.name}}::Stub::PrepareAsync{{method.name}},
    };
}
{% elif method.client_streaming %}
{{service.name}}Client::{{method.name}}Writer {{service.name}}Client::{{method.name}}(
    std::unique_ptr<::grpc::ClientContext> context,
    const USERVER_NAMESPACE::ugrpc::client::Qos& qos
) const {
    return {
        USERVER_NAMESPACE::ugrpc::client::impl::CreateCallParams(
            impl_, {{method_id}}, std::move(context), qos
        ),
        &{{service.name}}::Stub::PrepareAsync{{method.name}},
    };
}
{% elif method.server_streaming %}
{{service.name}}Client::{{method.name}}Reader {{service.name}}Client::{{method.name}}(
    const {{ method.input_type | grpc_to_cpp_name }}& request,
    std::unique_ptr<::grpc::ClientContext> context,
    const USERVER_NAMESPACE::ugrpc::client::Qos& qos
) const {
    return {
        USERVER_NAMESPACE::ugrpc::client::impl::CreateCallParams(
            impl_, {{method_id}}, std::move(context), qos
        ),
        &{{service.name}}::Stub::PrepareAsync{{method.name}},
        request,
    };
}
{% else %}
{{ method.output_type | grpc_to_cpp_name }} {{service.name}}Client::{{method.name}}(
    const {{ method.input_type | grpc_to_cpp_name }}& request,
    std::unique_ptr<::grpc::ClientContext> context,
    const USERVER_NAMESPACE::ugrpc::client::Qos& qos
) const {
    return Async{{method.name}}(request, std::move(context), qos).Get();
}

{{service.name}}Client::{{method.name}}ResponseFuture {{service.name}}Client::Async{{method.name}}(
    const {{ method.input_type | grpc_to_cpp_name }}& request,
    std::unique_ptr<::grpc::ClientContext> context,
    const USERVER_NAMESPACE::ugrpc::client::Qos& qos
) const {
    return {
        USERVER_NAMESPACE::ugrpc::client::impl::CreateCallParams(
            impl_, {{method_id}}, std::move(context), qos
        ),
        USERVER_NAMESPACE::ugrpc::client::impl::PrepareUnaryCallProxy(
            &{{service.name}}::Stub::PrepareAsync{{method.name}}
        ),
        request,
    };
}
{% endif %}
{% endfor %}

USERVER_NAMESPACE::ugrpc::impl::StaticServiceMetadata
{{ service.name }}Client::GetMetadata() {
  (void)k{{service.name}}TypesRegistration;  // odr-use

  return USERVER_NAMESPACE::ugrpc::impl::MakeStaticServiceMetadata<
      {{utils.namespace_with_colons(proto.namespace)}}::{{service.name}}>(
          k{{service.name}}MethodNames);
}
{% endfor %}
{% endcall %} {# utils.optional_namespace #}
