/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */
#include <client/test/component.hpp>

#include <userver/chaotic/openapi/client/config.hpp>
#include <userver/clients/http/component.hpp>
#include <userver/components/component_context.hpp>

namespace clients::test {

Component::Component(
    const USERVER_NAMESPACE::components::ComponentConfig& config,
    const USERVER_NAMESPACE::components::ComponentContext& context
)
    : USERVER_NAMESPACE::components::LoggableComponentBase(config, context),
      client_(
          USERVER_NAMESPACE::chaotic::openapi::client::ParseConfig(config, ClientImpl::kDefaultBaseUrl),
          context.FindComponent<USERVER_NAMESPACE::components::HttpClient>().GetHttpClient()
      ) {
    if (config.HasMember("middlewares")) {
        const auto& mw_config = config["middlewares"];
        const auto& registry = USERVER_NAMESPACE::chaotic::openapi::client::MiddlewareRegistry::Instance();
        const auto& factories = registry.GetFactories();

        for (const auto& [name, factory] : factories) {
            if (mw_config.HasMember(name)) {
                auto middleware = factory->Create(mw_config[name]);
                client_.RegisterMiddleware(middleware);
            }
        }
    }
}

Client& Component::GetClient() { return client_; }

}  // namespace clients::test
